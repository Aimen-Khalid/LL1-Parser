PROG	DEC	PROG'
PROG'	DEC	PROG'
PROG'	~
DEC	KEY	IDFR	(	VARDEC	)	COL	BLOCK
COL	:
KEY	def
VARDEC	~
VARDEC	VARDECNE
VARDECNE	IDFR	VARDECNE'
VARDECNE'	Comma	IDFR	VARDECNE'
VARDECNE'	~
BLOCK	{	ENE	}
ENE	EXP
ENE	~
EXP	(	EXP	BINOP	EXP	)
EXP	INTLIT
EXP	if	EXP	then	COL	BLOCK	else	COL	BLOCK
EXP	while	EXP	COL	BLOCK
EXP	for	IDFR	OPLIT	(	ARGS	)	COL	BLOCK
EXP	print	(	QUOTES	STRING	QUOTES	)
EXP	KEYWORD	(	INTLIT	)
EXP	IDFR	EXP'
EXP'	~
EXP'	(	ARGS	)
EXP'	=	EXP''
EXP''	EXP
EXP''	input	(	QUOTES	STRING	QUOTES	)
KEYWORD	int
KEYWORD	float
KEYWORD	str
QUOTES	q
STRING	INTLIT	STRING'
STRING'	IDFR	STRING'
STRING'	~
ARGS	ARGSNE
ARGS	~
ARGSNE	EXP	ARGSNE'
ARGSNE'	Comma	EXP	ARGSNE'
ARGSNE'	~
OPLIT	in
OPLIT	not in
IDFR	id
INTLIT	num
BINOP	==
BINOP	<	
BINOP	>
BINOP	<=
BINOP	>=
BINOP	+
BINOP	*
BINOP	-
BINOP	%
BINOP	/
BINOP	and
BINOP	or
BINOP	!=
